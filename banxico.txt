//Clave Simetrica
//java example create code for cipher AES-128 AES/GCM/NoPadding in base 64

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;

public class AESGCMEncryptionExample {
    public static void main(String[] args) throws Exception {
        // Input data and encryption key
        String inputText = "Hello, AES-GCM!";
        String encryptionKey = "ThisIsA128BitKey"; // 128-bit key

        // Generate a random initialization vector (IV) for GCM mode
        byte[] iv = new byte[12]; // 96 bits IV for AES-GCM
        // You should use a cryptographically secure random number generator to generate the IV in practice
        // For simplicity, this example uses a fixed IV.

        // Create a SecretKey object from the encryptionKey
        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("AES");
        SecretKeySpec secretKeySpec = new SecretKeySpec(encryptionKey.getBytes(), "AES");

        // Initialize the Cipher with AES/GCM/NoPadding
        Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");
        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, new GCMParameterSpec(128, iv));

        // Encrypt the input text
        byte[] encryptedBytes = cipher.doFinal(inputText.getBytes());

        // Encode the encrypted data in Base64
        String encryptedBase64 = Base64.getEncoder().encodeToString(encryptedBytes);

        System.out.println("Original Text: " + inputText);
        System.out.println("Encrypted (Base64): " + encryptedBase64);
    }
}

// Digital signature
//code for SHA512withRSAandMGF1 example java
//cambiarlo llave mas pequena 264 o el estandar mas pequeno
//minimo requerido menos hardware mas rapido

import java.security.*;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.util.Base64;

public class RSASignatureExample {
    public static void main(String[] args) throws Exception {
        // Generate a key pair (public and private keys)
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        keyPairGenerator.initialize(2048);
        KeyPair keyPair = keyPairGenerator.generateKeyPair();

        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();
        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();

        // Message to be signed
        String message = "Hello, world!";

        // Create a signature instance using SHA512withRSAandMGF1
        Signature signature = Signature.getInstance("SHA512withRSAandMGF1");

        // Initialize the signature with the private key for signing
        signature.initSign(privateKey);

        // Update the signature with the data to be signed
        signature.update(message.getBytes());

        // Generate the digital signature
        byte[] digitalSignature = signature.sign();

        System.out.println("Digital Signature: " + Base64.getEncoder().encodeToString(digitalSignature));

        // Verify the signature using the public key
        signature.initVerify(publicKey);
        signature.update(message.getBytes());

        boolean verified = signature.verify(digitalSignature);
        System.out.println("Signature Verified: " + verified);
    }
}
